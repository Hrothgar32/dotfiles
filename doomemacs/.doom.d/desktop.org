#+TITLE: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el :mkdirp yes

* Window Management
** EXWM setup
*** Utility functions

#+begin_src emacs-lisp
(defun alm/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun alm/connect-to-nextcloud()
  (start-process-shell-command
   "bash" nil "mount ~/nextcloud 1>/dev/null"))

(defun alm/kill-and-close ()
  (interactive)
  "Kill a buffer, and if possible, close it's window."
   (kill-current-buffer)
   (delete-window))

(defun alm/exwm-update-title ()
  (pcase exwm-class-name
    ("Brave-browser" (exwm-workspace-rename-buffer (format "Brave: %s" exwm-title)))))

  ;; When window title updates, use it to set the buffer name
  (add-hook 'exwm-update-title-hook #'alm/exwm-update-title)

(defun alm/set-chosen-wallpaper(wallpaper-file)
  (start-process-shell-command
   "feh" nil (concat "feh --bg-scale " wallpaper-file)))

(defun alm/set-random-wallpaper()
  (interactive)
  (let* ((pictures (directory-files "~/.lightdm_images" t directory-files-no-dot-files-regexp)))
   (alm/set-chosen-wallpaper (nth (random (length pictures)) pictures))))

(defun alm/choose-wallpaper(wallpaper-file)
  "Choose a wallpaper."
  (interactive (list(read-file-name "Select wallpaper :" "~/.lightdm_images/")))
  (alm/set-chosen-wallpaper wallpaper-file))

(defun alm/set-wallpaper()
  (interactive)
  (start-process-shell-command
   "feh" nil "feh --bg-scale /home/hrothgar32/.lightdm_images/futuristic.jpg"))

(defun alm/lock-screen()
  (interactive)
  (start-process-shell-command)
  "i3lock-fancy" nil "i3lock-fancy")

(defun alm/spotify-toggle()
  (interactive)
  (start-process-shell-command
   "playerctl" nil "playerctl --player=spotify play-pause"))

(defun alm/spotify-previous()
  (interactive)
  (start-process-shell-command
   "playerctl" nil "playerctl --player=spotify previous"))

(defun alm/spotify-next()
  (interactive)
  (start-process-shell-command
   "playerctl" nil "playerctl --player=spotify next"))

(defun alm/exwm-init-hook ()
  (alm/start-panel))

(add-hook 'exwm-update-class-hook #'alm/exwm-update-class)
(add-hook 'exwm-init-hook #'alm/exwm-init-hook)
#+end_src

*** Mappings
#+begin_src emacs-lisp
(map! :leader "d w" 'alm/choose-wallpaper)
(map! :leader "d r" 'alm/set-random-wallpaper)
#+end_src

*** EXWM Config


#+begin_src emacs-lisp

(use-package exwm
  :config
  (setq exwm-workspace-number 5)


  ;; Key resolution
  (require 'exwm-randr)
  (exwm-randr-enable)
  (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal")

  (alm/set-random-wallpaper)
  ;; (require 'exwm-systemtray)
  ;; (setq exwm-systemtray-height 32)
  ;; (exwm-systemtray-enable)
  ;; Automatically send the mouse cursor to the selected workspace's display
  (setq exwm-workspace-warp-cursor t)

;; These keys should always pass through to Emacs
(setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j  ;; Buffer list
      ?\C-\
      ))
;; Adding Space to the exwm-input-prefix
(push ?\x20 exwm-input-prefix-keys)


  (map! :map exwm-mode-map
"C-q" 'exwm-input-send-next-key)

  (setq exwm-input-global-keys
        `(
        ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
        ([?\s-r] . exwm-reset)
        ([?\s-f] . exwm-layout-toggle-fullscreen)

        ;; Move between windows
        ([?\s-h] . windmove-left)
        ([?\s-l] . windmove-right)
        ([?\s-k] . windmove-up)
        ([?\s-j] . windmove-down)
        ([?\s-S] . alm/spotify-toggle)
        ([?\s-A] . alm/spotify-previous)
        ([?\s-D] . alm/spotify-next)
        ([?\s-Q] . alm/kill-and-close)
        ([?\s-X] . alm/lock-screen)


        ;; Launching applications
        ;; ([?\s-d] . (lambda (command)
        ;;         (interactive (list (read-shell-command "$ ")))
        ;;         (start-process-shell-command command nil command)))

        ;; Switch workspace
        ([?\s-w] . exwm-workspace-switch)

        ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
        ,@(mapcar (lambda (i)
                `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                (number-sequence 0 9))))
  (exwm-input-set-key (kbd "s-d") 'counsel-linux-app)
  (exwm-enable))

#+end_src

* Desktop Environment
** Polybar config
*** Panel management

#+begin_src emacs-lisp
(defun alm/kill-panel()
  (interactive)
  (when alm/polybar-process
    (ignore-errors
      (kill-process alm/polybar-process)))
  (setq alm/polybar-process nil)
  )

(defun alm/start-panel()
  (interactive)
  (setq alm/polybar-process (start-process-shell-command "poly" nil "polybar main")))
#+end_src

*** Panel updating mode

#+begin_src emacs-lisp
;; (defun geci ()
;;   (pcase exwm--selected-input-mode
;;     ('line-mode' юдв)
;;     ('char-mode' юдг)
;;     ))

;; (defun alm/send-polybar-mode-hook ()
;;   (setq szam (geci))
;;   (start-process-shell-command "polybar-msg" nil
;;                                "polybar-msg hook exwm-mode 1"))

;; (add-hook 'exwm-input-input-mode-change-hook #'alm/send-polybar-mode-hook)
#+end_src

*** Main config file

#+begin_src conf :tangle ~/.config/polybar/config
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
;;
;;	    ____        __      __
;;	   / __ \____  / /_  __/ /_  ____ ______
;;	  / /_/ / __ \/ / / / / __ \/ __ `/ ___/
;;	 / ____/ /_/ / / /_/ / /_/ / /_/ / /
;;	/_/    \____/_/\__, /_.___/\__,_/_/
;;	              /____/
;;
;; Created By Aditya Shakya @adi1090x
;;
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Global WM Settings

[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 0

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; File Inclusion
; include an external file, like module file, etc.

include-file = ~/.config/polybar/colors.ini
include-file = ~/.config/polybar/modules.ini
include-file = ~/.config/polybar/user_modules.ini
include-file = ~/.config/polybar/bars.ini

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Bar Settings

[bar/main]
; Use either of the following command to list available outputs:
; If unspecified, the application will pick the first one it finds.
; $ polybar -m | cut -d ':' -f 1
; $ xrandr -q | grep " connected" | cut -d ' ' -f1
monitor =

; Use the specified monitor as a fallback if the main one is not found.
monitor-fallback =

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = true

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 100%
height = 26

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction
; of 50% minus 10 pixels
offset-x = 0%
offset-y = 0%

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = #DB07081A
; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
foreground = ${color.fg}

; Background gradient (vertical steps)
;   background-[0-9]+ = #aarrggbb
;;background-0 =

; Value used for drawing rounded corners
; Note: This shouldn't be used together with border-size because the border
; doesn't get rounded
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
radius-top = 0.0
radius-bottom = 0.0

; Under-/overline pixel size and argb color
; Individual values can be defined using:
;   {overline,underline}-size
;   {overline,underline}-color
overline-size = 2
overline-color = ${color.ac}

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
; The top and bottom borders are added to the bar height, so the effective
; window height is:
;   height + border-top-size + border-bottom-size
; Meanwhile the effective window width is defined entirely by the width key and
; the border is placed withing this area. So you effectively only have the
; following horizontal space on the bar:
;   width - border-right-size - border-left-size
border-bottom-size = 0
border-color = ${color.ac}

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin-left = 2
module-margin-right = 1

; Fonts are defined using <font-name>;<vertical-offset>
; Font names are specified using a fontconfig pattern.
;   font-0 = NotoSans-Regular:size=8;2
;   font-1 = MaterialIcons:size=10
;   font-2 = Termsynu:size=8;-1
;   font-3 = FontAwesome:size=10
; See the Fonts wiki page for more details

;;font-0 = "Misc Termsyn:size=12;1"
;;font-1 = "Wuncon Siji:size=12;1"

font-0 = "Ubuntu Condensed:size=10;2"
font-1 = "icomoon\-feather:size=10;2"
font-2 = "xos4 Terminus:size=12;1"

; Modules are added to one of the available blocks
;   modules-left = cpu ram
;   modules-center = xwindow xbacklight
;   modules-right = ipc clock

;; Available modules
;;
;alsa backlight battery
;bspwm cpu date
;filesystem github i3
;memory mpd wired-network
;network pulseaudio temperature
;keyboard title workspaces
;;
;; User modules
;checknetwork updates window_switch launcher powermenu sysmenu menu
;;
;; Bars
;cpu_bar memory_bar filesystem_bar mpd_bar
;volume brightness battery_bar

modules-left = workspaces
modules-center = spotify
modules-right = updates alsa filesystem battery keyboard  checknetwork date

; The separator will be inserted between the output of each module
separator =

; This value is used to add extra spacing between elements
; @deprecated: This parameter will be removed in an upcoming version
spacing = 0

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name =

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale =

; Position of the system tray window
; If empty or undefined, tray support will be disabled
; NOTE: A center aligned tray will cover center aligned modules
;
; Available positions:
;   left
;   center
;   right
;   none
tray-position = none

; If true, the bar will not shift its
; contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; DEPRECATED! Since 3.3.0 the tray always uses pseudo-transparency
; Enable pseudo transparency
; Will automatically be enabled if a fully transparent
; background color is defined using `tray-background`
tray-transparent = false

; Background color for the tray container
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${color.bg}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0

; Restack the bar window and put it above the
; selected window manager's root
;
; Fixes the issue where the bar is being drawn
; on top of fullscreen window's
;
; Currently supported WM's:
;   bspwm
;   i3 (requires: `override-redirect = true`)
; wm-restack =

; Set a DPI values used when rendering text
; This only affects scalable fonts
; dpi =

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true

; Fallback click handlers that will be called if
; there's no matching module handler found.
; click-left =
; click-middle =
; click-right =
; scroll-up =
; scroll-down =
; double-click-left =
; double-click-middle =
; double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click =
cursor-scroll =

;; WM Workspace Specific

; bspwm
scroll-up = bspc desktop -f prev.local
scroll-down = bspc desktop -f next.local

;i3
;;scroll-up = i3wm-wsnext
;;scroll-down = i3wm-wsprev
;;scroll-up = i3-msg workspace next_on_output
;;scroll-down = i3-msg workspace prev_on_output

;openbox
;awesome
;etc

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Application Settings

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
throttle-output = 5

; Time in milliseconds that the input handler will wait between processing events
throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

; Define fallback values used by all module formats
format-foreground =
format-background =
format-underline =
format-overline =
format-spacing =
format-padding =
format-margin =
format-offset =

; Enables pseudo-transparency for the bar
; If set to true the bar can be transparent without a compositor.
pseudo-transparency = true

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
;;	    __________  ______
;;	   / ____/ __ \/ ____/
;;	  / __/ / / / / /_
;;	 / /___/ /_/ / __/
;;	/_____/\____/_/
;;
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#+end_src

** Desktop Key Bindings

#+begin_src emacs-lisp
(use-package desktop-environment
  :after exwm
  :config (desktop-environment-mode)
  :custom
  (desktop-environment-brightness-small-increment "2%+")
  (desktop-environment-brightness-small-decrement "2%-")
  (desktop-environment-brightness-normal-increment "5%+")
  (desktop-environment-brightness-normal-decrement "5%-"))
#+end_src

** Desktop file

#+begin_src shell :tangle ./exwm/exwm.desktop :mkdirp yes
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh /home/hrothgar32/.doom.d/exwm/start-exwm.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=EXWM
DesktopNames=EXWM
#+end_src

** Launcher Script

This launcher script is invoked by =EXWM.desktop= to start Emacs and load our desktop environment configuration.  We also start up some other helpful applications to configure the desktop experience.

#+begin_src shell :tangle ./exwm/start-exwm.sh :shebang #!/bin/sh

  # Set the screen DPI (uncomment this if needed!)
  # xrdb ~/.emacs.d/exwm/Xresources

  # Run the menet compositor
  picom &

  # Enable screen locking on suspend
  # xss-lock -- slock &

  # Fire it up
  # exec dbus-launch --exit-with-session emacs -mm -l ~/.doom.d/desktop.el
  exec emacs -mm
#+end_src
